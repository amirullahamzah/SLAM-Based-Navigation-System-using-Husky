#!/usr/bin/env python3
import rospy
import math
from nav_msgs.msg import Odometry
from geometry_msgs.msg import PoseWithCovarianceStamped
from actionlib_msgs.msg import GoalStatusArray

class HuskyDistanceTracker:
    def __init__(self):
        rospy.init_node('husky_distance_tracker', anonymous=True)

        self.odom_sub = rospy.Subscriber('/odom', Odometry, self.odom_callback)
        self.amcl_sub = rospy.Subscriber('/amcl_pose', PoseWithCovarianceStamped, self.amcl_callback)
        self.move_base_sub = rospy.Subscriber('/move_base/status', GoalStatusArray, self.move_base_callback)

        self.last_position = None
        self.total_distance = 0.0

    def odom_callback(self, data):
        position = data.pose.pose.position
        self.calculate_distance(position)

    def amcl_callback(self, data):
        position = data.pose.pose.position
        self.calculate_distance(position)

    def move_base_callback(self, data):
        pass

    def calculate_distance(self, position):
        if self.last_position is not None:
            distance = math.sqrt((position.x - self.last_position.x) ** 2 + (position.y - self.last_position.y) ** 2)
            self.total_distance += distance
            rospy.loginfo(f"Total distance moved: {self.total_distance:.2f} meters")
        
        self.last_position = position

if __name__ == '__main__':
    try:
        tracker = HuskyDistanceTracker()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
